# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Copyright contributors to the vLLM project
# adapated from https://github.com/vllm-project/vllm/blob/main/csrc/quantization/gptq_marlin/generate_kernels.py
import glob
import itertools
import os
import subprocess


FILE_HEAD = """
// auto generated by generate_mmq.py
// clang-format off
#include "mmq_kernel.cuh"
""".strip()

KERNEL_IMPL = """
DECL_MMQ_CASE({scalar_t}, {ggml_type});
"""


SCALAR_TYPES = {
    "fp32": "float",
    "fp16": "c10::Half",
    "bf16": "c10::BFloat16",
}
QUANT_TYPES = {
    "q4_0": "GGML_TYPE_Q4_0",
    "q4_1": "GGML_TYPE_Q4_1",
    "q5_0": "GGML_TYPE_Q5_0",
    "q5_1": "GGML_TYPE_Q5_1",
    "q8_0": "GGML_TYPE_Q8_0",
    "q2_k": "GGML_TYPE_Q2_K",
    "q3_k": "GGML_TYPE_Q3_K",
    "q4_k": "GGML_TYPE_Q4_K",
    "q5_k": "GGML_TYPE_Q5_K",
    "q6_k": "GGML_TYPE_Q6_K",
}


def remove_old_kernels():
    for filename in glob.glob(os.path.dirname(__file__) + "/mmq_*.cu"):
        subprocess.call(["rm", "-f", filename])


def generate_new_kernels():
    for (dtype, scalar_t), (quant, ggml_type) in itertools.product(SCALAR_TYPES.items(), QUANT_TYPES.items()):

        kernel_impl = KERNEL_IMPL.format(scalar_t=scalar_t, ggml_type=ggml_type)
        file_content = FILE_HEAD + "\n\n" + kernel_impl
        filename = f"mmq_{quant}_{dtype}.cu"

        with open(os.path.join(os.path.dirname(__file__), filename), "w") as f:
            f.write(file_content)


if __name__ == "__main__":
    remove_old_kernels()
    generate_new_kernels()
